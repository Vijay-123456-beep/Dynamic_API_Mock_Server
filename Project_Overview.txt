###Project Overview

Dynamic_API_Mock_Server is a full-stack application designed to provide a dynamic API mocking platform. 
It allows users to create, manage, and test mock API endpoints, making it useful for frontend/backend 
development, testing, and rapid prototyping without needing real backend services.


###Key Libraries & Frameworks

Backend (Java, Spring Boot)

Spring Boot: Main framework for building RESTful APIs.
Spring Security: Handles authentication and authorization.
Spring WebSocket: Enables real-time communication.
Spring Data JPA: For database interactions.
Actuator: For monitoring and management.
OpenAPI/Swagger: API documentation.
Maven: Build and dependency management.

Frontend (React, TypeScript)

React: UI library for building the SPA.
TypeScript: Type safety for frontend code.
Vite: Fast build tool and dev server.
React Query: Data fetching and caching.
ESLint: Linting and code quality.
Other: CSS modules, Vite plugins.

### Features
-User authentication (login/signup).
-Dashboard for managing mock APIs.
-Dynamic creation, editing, and deletion of mock endpoints.
-Import/export of mock configurations.
-API testing interface (API Tester).
-Real-time updates via WebSocket.
-Admin panel for user and mock management.
-API documentation (Swagger/OpenAPI).
-UI for managing mocks and users.

### Codebase Structure
/mock-ui/                # Frontend React app
  /src/
    /pages/              # Main UI pages (Dashboard, Login, Signup, etc.)
    /lib/                # API utilities, auth, query client, routes
    /assets/             # Static assets
    App.tsx, main.tsx    # App entry points
  package.json           # Frontend dependencies
  vite.config.ts         # Vite config

/src/main/java/com/vijay/mockserver/   # Backend Java code
  /actuator/             # Monitoring endpoints
  /admin/                # Admin controllers
  /auth/                 # Auth logic (controllers, DTOs)
  /common/               # Shared utilities (pagination, auditing)
  /config/               # App configuration (OpenAPI, etc.)
  /mock/                 # Mock endpoint logic (controllers, services, repo)
  /security/             # Security config
  /seed/                 # Data seeding
  /ui/                   # UI-related backend logic
  /user/                 # User management
  /websocket/            # WebSocket support
  DynamicApiMockServerApplication.java # Main entry point

/src/main/resources/
  application.yml        # Backend config
  /templates/            # HTML templates

/docker-compose.yml      # Docker orchestration
/Dockerfile              # Backend Dockerfile
/pom.xml                 # Maven config
/README.md               # Project documentation
/ENHANCEMENTS.md         # Planned improvements

### How It Works
1.Startup: Spring Boot app starts, initializes DB, configures security, and exposes REST endpoints.
2.User Auth: Users sign up or log in via the frontend, which communicates with backend auth endpoints.
3.Mock Management: Authenticated users can create, edit, or delete mock API endpoints via the UI. 
  These are stored in the backend and served dynamically.
4.API Testing: Users can test their mocks directly from the UI.
5.Import/Export: Mocks can be imported/exported for sharing or backup.
6.Real-Time Updates: WebSocket support allows live updates to the UI when mocks change.
7.Admin Features: Admins can manage users and all mocks.
8.Documentation: OpenAPI/Swagger provides interactive API docs.

### Future Enhancements
-More advanced mock response logic (dynamic templating, delays, etc.)
-Role-based access control improvements.
-Enhanced API analytics and monitoring.
-Better import/export formats.
-UI/UX improvements.
-Integration with external services or databases.
-More robust test automation.

### Dependencies (from `pom.xml`)
Backend (from pom.xml)
-spring-boot-starter-web
-spring-boot-starter-security
-spring-boot-starter-data-jpa
-spring-boot-starter-actuator
-spring-boot-starter-websocket
-springdoc-openapi-ui
-H2 or other DB drivers

Frontend (from package.json)
-react, react-dom
-typescript
-@tanstack/react-query
-vite
-eslint, @types/*, etc.

### Executing Commands

Typical commands for this project:

Backend

mvn clean install — Build the backend
mvn spring-boot:run — Run the backend server
docker build -t dynamic-api-mock-server . — Build Docker image
docker-compose up — Start services via Docker Compose

Frontend

cd mock-ui
npm install — Install frontend dependencies
npm run dev — Start Vite dev server
npm run build — Build production frontend